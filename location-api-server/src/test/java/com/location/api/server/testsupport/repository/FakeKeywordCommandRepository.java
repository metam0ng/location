package com.location.api.server.testsupport.repository;

import com.location.api.server.keyword.domain.Keyword;
import com.location.api.server.keyword.repository.command.KeywordCommandRepository;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeKeywordCommandRepository implements KeywordCommandRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final AtomicLong autoGeneratedVersion = new AtomicLong(0);
    private final List<Keyword> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Keyword save(Keyword keyword) {

        if (keyword.getKeywordId() == null || keyword.getKeywordId() == 0) {
            Keyword newUser = Keyword.builder()
                    .keywordId(autoGeneratedId.incrementAndGet())
                    .keyword(keyword.getKeyword())
                    .count(keyword.getCount())
                    .version(Math.toIntExact(autoGeneratedVersion.getAndIncrement()))
                    .build();
            data.add(newUser);
            return newUser;
        } else {
            data.removeIf(domain -> Objects.equals(domain.getKeywordId(), keyword.getKeywordId()));
            data.add(keyword);
            return keyword;
        }
    }

    @Override
    public Optional<Keyword> findByKeyword(String keyword) {
        return data.stream().filter(domain -> domain.getKeyword().equals(keyword)).findAny();
//        if (keyword.contains("카카오 뱅크")) {
//            return Optional.of(Keyword.builder()
//                    .keywordId(1L)
//                    .keyword("카카오 뱅크")
//                    .count(1L)
//                    .version(0)
//                    .build());
//        }
//        return Optional.empty();
    }
}
